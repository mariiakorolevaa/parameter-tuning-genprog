import json

json_path_full = "C:/Users/kiris/WebstormProjects/whisker-main/config/repair/genProg.json"
json_path_headless = "C:/Users/kiris/WebstormProjects/whisker-main/config/repair/genProg-headless-chicken.json"


def get_json_file(is_headless):
    if is_headless:
        json_file = open(json_path_headless)
    else:
        json_file = open(json_path_full)
    return json_file


def set_json_paths(path_to_full, path_to_headless):
    global json_path_full
    global json_path_headless
    json_path_full = path_to_full
    json_path_headless = path_to_headless


# replace the values in the json file with the new values generated by the random search
def replace_json_values_for_rationals_headless(crossover_rate, mutation_rate):
    with open(json_path_headless, "r") as file:
        original_content = file.read()

    with open(json_path_headless, 'r') as f:
        json_data = json.load(f)
        json_data['algorithm']['populationSize'] = 4
        json_data['stoppingCondition']['conditions'][1]['iterations'] = 10
        json_data['stoppingCondition']['conditions'][2]['duration'] = 10000
        json_data['mutation']['probability'] = mutation_rate
        json_data['crossover']['probability'] = crossover_rate

    with open(json_path_headless, 'w') as f:
        json.dump(json_data, f, indent=2)

    return original_content


def replace_json_values_for_rationals_full(crossover_rate, mutation_insert_rate, mutation_delete_rate,
                                           mutation_change_rate):
    with open(json_path_full, "r") as file:
        original_content = file.read()

    with open(json_path_full, 'r') as f:
        json_data = json.load(f)
        json_data['algorithm']['populationSize'] = 4
        json_data['stoppingCondition']['conditions'][1]['duration'] = 10000
        json_data['mutation']['probability']['insertion'] = mutation_insert_rate
        json_data['mutation']['probability']['deletion'] = mutation_delete_rate
        json_data['mutation']['probability']['change'] = mutation_change_rate
        json_data['crossover']['probability'] = crossover_rate

    with open(json_path_full, 'w') as f:
        json.dump(json_data, f, indent=2)

    return original_content


def replace_json_values_for_integers(population_size, elitism_size, is_headless):
    if is_headless:
        with open(json_path_headless, "r") as file:
            original_content = file.read()
    else:
        with open(json_path_full, "r") as file:
            original_content = file.read()

    with open(json_path_full, 'r') as f:
        json_data = json.load(f)
        json_data['algorithm']['populationSize'] = population_size
        json_data['algorithm']['elitismSize'] = elitism_size
    with open(json_path_full, 'w') as f:
        json.dump(json_data, f, indent=2)

    return original_content


# return the json file to its initial state
def return_initial_json(original_file, is_headless):
    if is_headless:
        with open(json_path_headless, "w") as file:
            file.write(original_file)
    else:
        with open(json_path_full, "w") as file:
            file.write(original_file)
